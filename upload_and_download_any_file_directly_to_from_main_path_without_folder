
// model.java  <===========================================================================================================================================================

package com.file.FileSpring.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name="user_info_file")

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserInfo {
    @Id
    @GeneratedValue(strategy= GenerationType.IDENTITY)
    private Long id;
    private Long userId;
    private String username;
    private String fileName;
}

// repo.java  <==============================================================================================================================================================

package com.file.FileSpring.repository;

import com.file.FileSpring.model.UserInfo;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserInfoRepository extends JpaRepository<UserInfo,Long> {
    UserInfo findByuserId(Long userId);
}

// service.java  <=======================================================================================================================================================

package com.file.FileSpring.service;

import com.file.FileSpring.model.UserInfo;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@Service
public interface UserInfoService {

    // upload the file or image
    UserInfo uploadFile(Long userId, String username,MultipartFile file) throws IOException;

    // download the file or image
    UserInfo downloadFile(Long userId) throws IOException;
}


// service_impl.java  <==================================================================================================================================================

package com.file.FileSpring.service.impl;

import com.file.FileSpring.model.UserInfo;
import com.file.FileSpring.repository.UserInfoRepository;
import com.file.FileSpring.service.UserInfoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Base64;

@Service

public class UserInfoServiceImpl implements UserInfoService {

    @Autowired
    private UserInfoRepository userInfoRepository;

    private String uploadDir="C:\\Users\\piyush_kumar\\Desktop\\springFile";


    @Override
    public UserInfo uploadFile(Long userId, String username,  MultipartFile file) throws IOException {

        // data saved in table
        UserInfo userInfo= UserInfo.builder().userId(userId).username(username).fileName(file.getOriginalFilename()).build();
        UserInfo user=userInfoRepository.save(userInfo);

        // file or folder directory
        Path FilePath = Path.of(uploadDir,file.getOriginalFilename());
        Files.createDirectories(FilePath.getParent());
        Files.copy(file.getInputStream(), FilePath, StandardCopyOption.REPLACE_EXISTING);

        return user;
    }

    @Override
    public UserInfo downloadFile(Long userId) throws IOException {

        // Fetch user info from database
        UserInfo userInfo=userInfoRepository.findByuserId(userId);


        // fetch fileName info
        String fileName=userInfo.getFileName();


        // Construct the file path
        Path filePath = Paths.get(uploadDir,fileName);

        // Read the file content into a byte array
        byte[] fileBytes = Files.readAllBytes(filePath);

        // Convert byte array to Base64-encoded string
        String base64Image = Base64.getEncoder().encodeToString(fileBytes);
        userInfo.setFileName(base64Image);

        return userInfo;
    }
}

// controller.java  <======================================================================================================================================================

package com.file.FileSpring.controller;

import com.file.FileSpring.model.UserInfo;
import com.file.FileSpring.service.UserInfoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@RestController
@RequestMapping("/file")
public class UserInfoController {

    @Autowired
    private UserInfoService userInfoService;

    @PostMapping("/upload")
    public ResponseEntity<?>uploadFiles(@RequestParam Long userId,@RequestParam String username,@RequestParam MultipartFile file) throws IOException {
        UserInfo userInfo=userInfoService.uploadFile(userId,username,file);
        if(userInfo !=null){
            return ResponseEntity.ok(userInfo);
        }
        else{
            return ResponseEntity.badRequest().body("File upload failed");
        }
    }


    @GetMapping("/download/{userId}")
    public ResponseEntity<?>Download(@PathVariable Long userId) throws IOException {
        UserInfo user= userInfoService.downloadFile(userId);
        if(user ==null){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
        }
        else{
            return ResponseEntity.ok(user);
        }
    }
}


// application.properties  <================================================================================================================================================

spring.application.name=FileSpring
spring.datasource.url=jdbc:mysql://localhost:3306/file_spring
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update


// api 

upload => http://localhost:8080/file/upload
download => http://localhost:8080/file/download/1
